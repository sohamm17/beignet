From 54eac0d43d1db154d77070bcbf226880e014c30f Mon Sep 17 00:00:00 2001
From: Homer Hsing <homer.xing@intel.com>
Date: Wed, 19 Jun 2013 12:45:52 +0800
Subject: [PATCH 07/12] test case for 64-bit float
To: beignet@lists.freedesktop.org

Signed-off-by: Homer Hsing <homer.xing@intel.com>
---
 kernels/compiler_double.cl   |    7 +++++++
 kernels/compiler_double_2.cl |    7 +++++++
 utests/CMakeLists.txt        |    2 ++
 utests/compiler_double.cpp   |   46 +++++++++++++++++++++++++++++++++++++++++
 utests/compiler_double_2.cpp |   47 ++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 109 insertions(+)
 create mode 100644 kernels/compiler_double.cl
 create mode 100644 kernels/compiler_double_2.cl
 create mode 100644 utests/compiler_double.cpp
 create mode 100644 utests/compiler_double_2.cpp

Index: beignet-0.1+git20130619+42967d2/kernels/compiler_double.cl
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ beignet-0.1+git20130619+42967d2/kernels/compiler_double.cl	2013-06-19 21:04:47.534666326 +0200
@@ -0,0 +1,7 @@
+#pragma OPENCL EXTENSION cl_khr_fp64 : enable
+kernel void compiler_double(global double *src, global double *dst) {
+  int i = get_global_id(0);
+  double d = 1.234567890123456789;
+  dst[i] = d * (src[i] + d);
+}
+
Index: beignet-0.1+git20130619+42967d2/kernels/compiler_double_2.cl
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ beignet-0.1+git20130619+42967d2/kernels/compiler_double_2.cl	2013-06-19 21:04:47.534666326 +0200
@@ -0,0 +1,7 @@
+#pragma OPENCL EXTENSION cl_khr_fp64 : enable
+kernel void compiler_double_2(global float *src, global double *dst) {
+  int i = get_global_id(0);
+  float d = 1.234567890123456789f;
+  dst[i] = d * (d + src[i]);
+}
+
Index: beignet-0.1+git20130619+42967d2/utests/CMakeLists.txt
===================================================================
--- beignet-0.1+git20130619+42967d2.orig/utests/CMakeLists.txt	2013-06-19 21:04:43.270666516 +0200
+++ beignet-0.1+git20130619+42967d2/utests/CMakeLists.txt	2013-06-19 21:04:47.534666326 +0200
@@ -27,6 +27,8 @@
   compiler_copy_image.cpp
   compiler_copy_image_3d.cpp
   compiler_copy_buffer_row.cpp
+  compiler_double.cpp
+  compiler_double_2.cpp
   compiler_fabs.cpp
   compiler_fill_image.cpp
   compiler_fill_image0.cpp
Index: beignet-0.1+git20130619+42967d2/utests/compiler_double.cpp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ beignet-0.1+git20130619+42967d2/utests/compiler_double.cpp	2013-06-19 21:04:47.534666326 +0200
@@ -0,0 +1,46 @@
+#include <cmath>
+#include "utest_helper.hpp"
+
+static void cpu(int global_id, double *src, double *dst) {
+  double f = src[global_id];
+  double d = 1.234567890123456789;
+  dst[global_id] = d * (f + d);
+}
+
+void compiler_double(void)
+{
+  const size_t n = 16;
+  double cpu_dst[n], cpu_src[n];
+
+  // Setup kernel and buffers
+  OCL_CREATE_KERNEL("compiler_double");
+  OCL_CREATE_BUFFER(buf[0], 0, n * sizeof(double), NULL);
+  OCL_CREATE_BUFFER(buf[1], 0, n * sizeof(double), NULL);
+  OCL_SET_ARG(0, sizeof(cl_mem), &buf[0]);
+  OCL_SET_ARG(1, sizeof(cl_mem), &buf[1]);
+  globals[0] = n;
+  locals[0] = 16;
+
+  // Run random tests
+  for (uint32_t pass = 0; pass < 1; ++pass) {
+    OCL_MAP_BUFFER(0);
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      cpu_src[i] = ((double*)buf_data[0])[i] = .1f * (rand() & 15) - .75f;
+    OCL_UNMAP_BUFFER(0);
+
+    // Run the kernel on GPU
+    OCL_NDRANGE(1);
+
+    // Run on CPU
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      cpu(i, cpu_src, cpu_dst);
+
+    // Compare
+    OCL_MAP_BUFFER(1);
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      OCL_ASSERT(fabs(((double*)buf_data[1])[i] - cpu_dst[i]) < 1e-4);
+    OCL_UNMAP_BUFFER(1);
+  }
+}
+
+MAKE_UTEST_FROM_FUNCTION(compiler_double);
Index: beignet-0.1+git20130619+42967d2/utests/compiler_double_2.cpp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ beignet-0.1+git20130619+42967d2/utests/compiler_double_2.cpp	2013-06-19 21:04:47.534666326 +0200
@@ -0,0 +1,47 @@
+#include <cmath>
+#include "utest_helper.hpp"
+
+static void cpu(int global_id, float *src, double *dst) {
+  float f = src[global_id];
+  float d = 1.234567890123456789;
+  dst[global_id] = d * (d + f);
+}
+
+void compiler_double_2(void)
+{
+  const size_t n = 16;
+  float cpu_src[n];
+  double cpu_dst[n];
+
+  // Setup kernel and buffers
+  OCL_CREATE_KERNEL("compiler_double_2");
+  OCL_CREATE_BUFFER(buf[0], 0, n * sizeof(float), NULL);
+  OCL_CREATE_BUFFER(buf[1], 0, n * sizeof(double), NULL);
+  OCL_SET_ARG(0, sizeof(cl_mem), &buf[0]);
+  OCL_SET_ARG(1, sizeof(cl_mem), &buf[1]);
+  globals[0] = n;
+  locals[0] = 16;
+
+  // Run random tests
+  for (uint32_t pass = 0; pass < 1; ++pass) {
+    OCL_MAP_BUFFER(0);
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      cpu_src[i] = ((float*)buf_data[0])[i] = .1f * (rand() & 15) - .75f;
+    OCL_UNMAP_BUFFER(0);
+
+    // Run the kernel on GPU
+    OCL_NDRANGE(1);
+
+    // Run on CPU
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      cpu(i, cpu_src, cpu_dst);
+
+    // Compare
+    OCL_MAP_BUFFER(1);
+    for (int32_t i = 0; i < (int32_t) n; ++i)
+      OCL_ASSERT(fabs(((double*)buf_data[1])[i] - cpu_dst[i]) < 1e-4);
+    OCL_UNMAP_BUFFER(1);
+  }
+}
+
+MAKE_UTEST_FROM_FUNCTION(compiler_double_2);
