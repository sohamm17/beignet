Description: Enable extra output from tests

Turn on udebug so tests print their full output, and mark failures
by "failed:" instead of invisible-in-logs colour.

For convenience, turn the test setup script (utests/setenv.sh) into a
test running script (it isn't included in the final package, so
does not need to stay compatible).

Author: Rebecca N. Palmer <rebecca_palmer@zoho.com>

--- beignet.orig/utests/builtin_acos_asin.cpp
+++ beignet/utests/builtin_acos_asin.cpp
@@ -2,12 +2,12 @@
 #include <cmath>
 #include <algorithm>
 
-#define udebug 0
+#define udebug 1
 #define printf_c(...) \
 {\
-  printf("\033[1m\033[40;31m");\
+  printf("failed:");\
   printf( __VA_ARGS__ );\
-  printf("\033[0m");\
+  status = 1;\
 }
 
 namespace {
@@ -31,6 +31,7 @@ static void builtin_acos_asin(void)
 {
   // Setup kernel and buffers
   int k, i, index_cur;
+  int status = 0;
   float gpu_data[max_function * count_input] = {0}, cpu_data[max_function * count_input] = {0};
 
   OCL_CREATE_KERNEL("builtin_acos_asin");
@@ -85,6 +86,7 @@ static void builtin_acos_asin(void)
 #endif
     }
   }
+  OCL_ASSERT(status == 0);
 }
 
 MAKE_UTEST_FROM_FUNCTION(builtin_acos_asin)
--- beignet.orig/utests/builtin_exp.cpp
+++ beignet/utests/builtin_exp.cpp
@@ -2,7 +2,7 @@
 #include <cmath>
 #include <algorithm>
 
-#define udebug 0
+#define udebug 1
 
 #define FLT_MAX 0x1.fffffep127f
 #define FLT_MIN ldexpf(1.0,-126)
@@ -10,9 +10,9 @@
 
 #define printf_c(...) \
 {\
-  printf("\033[1m\033[40;31m");\
+  printf("failed:");\
   printf( __VA_ARGS__ );\
-  printf("\033[0m");\
+  status = 1;\
 }
 
 namespace{
@@ -36,6 +36,7 @@ static void builtin_exp(void)
 {
   // Setup kernel and buffers
   int k, i, index_cur;
+  int status = 0;
   float gpu_data[max_function * count_input] = {0}, cpu_data[max_function * count_input] = {0};
   float diff;
   char log[256] = {0};
@@ -75,19 +76,19 @@ static void builtin_exp(void)
 
 #if udebug
       if (std::isinf(cpu_data[index_cur]) && std::isinf(gpu_data[index_cur])){
-        printf(log);
+        printf("%s",log);
       }
       else if (std::isnan(cpu_data[index_cur]) && std::isnan(gpu_data[index_cur])){
-        printf(log);
+        printf("%s",log);
       }
       else if( diff / cpu_data[index_cur] < 3 * FLT_ULP \
         && ( gpu_data[index_cur] > FLT_ULP  || cpu_data[index_cur] > FLT_ULP )){
-        printf(log);
+        printf("%s",log);
       }
       else if ( gpu_data[index_cur] < FLT_ULP && gpu_data[index_cur] < FLT_ULP)
-        printf(log);
+        printf("%s",log);
       else
-        printf_c(log);
+        printf_c("%s",log);
 #else
       if (std::isinf(cpu_data[index_cur]))
         OCL_ASSERTM(std::isinf(gpu_data[index_cur]), log);
@@ -100,6 +101,7 @@ static void builtin_exp(void)
 #endif
     }
   }
+  OCL_ASSERT(status == 0);
 }
 
 MAKE_UTEST_FROM_FUNCTION(builtin_exp)
--- beignet.orig/utests/builtin_global_id.cpp
+++ beignet/utests/builtin_global_id.cpp
@@ -22,7 +22,7 @@ dimension:3
  9 10 11   21 22 23   33 34 35   45 46 47   57 58 59
 */
 
-#define udebug 0
+#define udebug 1
 #include "utest_helper.hpp"
 static void builtin_global_id(void)
 {
--- beignet.orig/utests/builtin_local_id.cpp
+++ beignet/utests/builtin_local_id.cpp
@@ -26,7 +26,7 @@ dimension:3
 429 430 431 432 433 434 ... 571 572 573 574 575
 */
 
-#define udebug 0
+#define udebug 1
 #include "utest_helper.hpp"
 static void builtin_local_id(void)
 {
--- beignet.orig/utests/builtin_local_size.cpp
+++ beignet/utests/builtin_local_size.cpp
@@ -28,7 +28,7 @@ get_local_size(4) = 1 (dimension:3)
 
 */
 #include "utest_helper.hpp"
-#define udebug 0
+#define udebug 1
 
 static void builtin_local_size(void)
 {
--- beignet.orig/utests/builtin_num_groups.cpp
+++ beignet/utests/builtin_num_groups.cpp
@@ -25,7 +25,7 @@ get_num_groups(2) = 3 (dimension:3)
 get_num_groups(3) = 1 (dimension:3)
 */
 
-#define udebug 0
+#define udebug 1
 #include "utest_helper.hpp"
 static void builtin_num_groups(void)
 {
--- beignet.orig/utests/builtin_pow.cpp
+++ beignet/utests/builtin_pow.cpp
@@ -3,12 +3,12 @@
 #include <algorithm>
 #include <string.h>
 
-#define udebug 0
+#define udebug 1
 #define printf_c(...) \
 {\
-  printf("\033[1m\033[40;31m");\
+  printf("failed:");\
   printf( __VA_ARGS__ );\
-  printf("\033[0m");\
+  status = 1;\
 }
 
 namespace {
@@ -31,6 +31,7 @@ static void builtin_pow(void)
 {
   // Setup kernel and buffers
   int k, i, index_cur;
+  int status = 0;
   float ULPSIZE_NO_FAST_MATH = 16.0;
   float gpu_data[max_function * count_input] = {0}, cpu_data[max_function * count_input] = {0};
 
@@ -84,7 +85,7 @@ static void builtin_pow(void)
            && (denormals_supported || gpu_data[index_cur]!=0 || std::fpclassify(cpu_data[index_cur])!=FP_SUBNORMAL) ) )
 
       {
-        printf_c("%d/%d: x:%f, y:%f -> gpu:%f  cpu:%f\n", k, i, input_data1[k], input_data2[k], gpu_data[index_cur], cpu_data[index_cur]);
+        printf_c("%d/%d: x:%f, y:%f -> gpu:%e  cpu:%e err: %e ULP: %e\n", k, i, input_data1[k], input_data2[k], gpu_data[index_cur], cpu_data[index_cur],gpu_data[index_cur]-cpu_data[index_cur],cl_FLT_ULP(cpu_data[index_cur]));
       }
       else
         printf("%d/%d: x:%f, y:%f -> gpu:%f  cpu:%f\n", k, i, input_data1[k], input_data2[k], gpu_data[index_cur], cpu_data[index_cur]);
@@ -101,6 +102,7 @@ static void builtin_pow(void)
 #endif
     }
   }
+  OCL_ASSERT(status == 0);
 }
 
 MAKE_UTEST_FROM_FUNCTION(builtin_pow)
--- beignet.orig/utests/setenv.sh.in
+++ beignet/utests/setenv.sh.in
@@ -8,3 +8,6 @@ export OCL_GBE_PATH=@LOCAL_GBE_OBJECT_DI
 export OCL_INTERP_PATH=@LOCAL_INTERP_OBJECT_DIR@
 #disable self-test so we can get something more precise than "doesn't work"
 export OCL_IGNORE_SELF_TEST=1
+obj-`dpkg-architecture -qDEB_HOST_GNU_TYPE`/utests/utest_run -a
+export OCL_STRICT_CONFORMANCE=0
+obj-`dpkg-architecture -qDEB_HOST_GNU_TYPE`/utests/utest_run -a
--- beignet.orig/utests/utest_generator.py
+++ beignet/utests/utest_generator.py
@@ -159,6 +159,7 @@ def udebug(ulpSize,returnType,function):
     }
 #endif
   }
+  OCL_ASSERTM(status == 0, log);
 }\n'''%(returnType,Min_ulp(function),\
         ulpUnit(ulpSize),ulpNum(ulpSize),\
         ulpNum(ulpSize), ulpNum(ulpSize),\
@@ -225,16 +226,16 @@ which can print more values and informat
 #include <algorithm>
 #include <string.h>
 
-#define udebug 0
+#define udebug 1
 #define FLT_MAX 0x1.fffffep127f
 #define FLT_MIN 0x1.0p-126f
 #define INT_ULP 0
 
 #define printf_c(...) \\
 {\\
-  printf("\\033[1m\\033[40;31m");\\
+  printf("failed:");\\
   printf( __VA_ARGS__ );\\
-  printf("\\033[0m");\\
+  status = 1;\\
 }
 '''
     #########Execute class itself
@@ -341,6 +342,7 @@ which can print more values and informat
 static void %s_%s(void)
 {
   int index;
+  int status = 0;
   %s gpu_data[count_input] = {0}, cpu_data[count_input] = {0}, diff=0.0;
   char log[1024] = {0};
 
--- beignet.orig/utests/profiling_exec.cpp
+++ beignet/utests/profiling_exec.cpp
@@ -26,10 +26,10 @@ static void check_profiling_time(cl_ulon
     double submit_to_start = (double)(start - submit)*1e-9;
     double start_to_end = (double)(end - start)*1e-9;
 
-    //printf("Profiling info:\n");
-    //printf("Time from queue to submit : %fms\n", (double)(queue_to_submit) * 1000.f );
-    //printf( "Time from submit to start : %fms\n", (double)(submit_to_start) * 1000.f );
-    //printf( "Time from start to end: %fms\n", (double)(start_to_end) * 1000.f );
+    printf("Profiling info:\n");
+    printf("Time from queue to submit : %fms\n", (double)(queue_to_submit) * 1000.f );
+    printf( "Time from submit to start : %fms\n", (double)(submit_to_start) * 1000.f );
+    printf( "Time from start to end: %fms\n", (double)(start_to_end) * 1000.f );
 
     OCL_ASSERTM(queued <= submit, "Enqueue time is later than submit time, invalid\n");
     OCL_ASSERTM(submit <= start, "Submit time is later than start time, invalid\n");
